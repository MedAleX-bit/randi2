<project name="randi2" default="dist" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant" >
    <description>
        Build-Skript RANDI2
    </description>
	
	<property environment="env"/> <!-- enable env-vars-->
	<property file="build.properties" /> <!-- reading prop file-->
	
	<property name="src.dir" location="src" />
	<property name="3rdParty" location="./../3rd Party"/>
	
	<property name="build.dir" location="build" />
	<property name="build.junit.dir" location="${build.dir}/junit" />
	<property name="build.classes.dir" location="${build.dir}/classes" />
	<property name="build.protocols.dir" location="${build.dir}/protokolle" />
	<property name="build.cobertura.dir" location="build/cobertura" />
	
	<property name="tests.junit.src.dir" location="test" />
	
	<property name="docs.dir" location="docs"/>
	<property name="docs.javadoc.dir" location="${docs.dir}/javadoc" />
	<property name="docs.junit.dir" location="${docs.dir}/junit"/>
	<property name="docs.junit.reports.dir" location="${docs.junit.dir}/reports"/>
	<property name="docs.junit.html.dir" location="${docs.junit.dir}/html"/>
	<property name="docs.ivy.report.dir" location="${docs.dir}/ivy"/>
	<property name="docs.checkstyle.dir" location="${docs.dir}/checkstyle"/>
	<property name="docs.findbugs.dir" location="${docs.dir}/findbugs"/>
	<property name="docs.cobertura.dir" location="docs/cobertura" />
	
	<property name="ivy.lib.dir" location="lib" />
	<property name="lib.dir" location="${ivy.lib.dir}" />
	<property name="dist.dir" location="dist" />

	<property name="tomcat.lib.dir" location="${env.CATALINA_HOME}/lib/" />
	<property name="protocols.dir" location="WebContent/WEB-INF/protokolle" />
	<property name="ivy.cache.dir" location="ivy-cache"/>
	<property name="randi2.dist.name" value="randi2.war"/>
	<property name="deploy.server.dir" location="${env.CATALINA_HOME}/webapps"/>
	<property name="findbugs.home" value="${3rdParty}/sourceforge.net/findbugs/1.3.4" />
		
	<ivy:settings file="ivysettings.xml" />
	
	<!-- Classpaths -->
	<path id="classpath.cobertura">
		<pathelement location="${3rdParty}/sourceforge.net/cobertura/1.9/cobertura.jar"/>
		<fileset dir="${3rdParty}/sourceforge.net/cobertura/1.9/lib/">
			<include name="**/*.jar"/>
		</fileset>
	</path>
	
	<!-- DEFINE THE TASKs -->
	<taskdef name="svn" classname="org.tigris.subversion.svnant.SvnTask">
		<classpath>
			<pathelement location="{3rdParty}/tigris.org/svnant/1.0.0/jars/svnjavahl.jar"/>
			<pathelement location="{3rdParty}/tigris.org/svnant/1.0.0/jars/svnant.jar"/>
			<pathelement location="{3rdParty}/tigris.org/svnant/1.0.0/jars/svnClientAdapter.jar"/>	
		</classpath>
	</taskdef>

	<taskdef resource="net/sf/antcontrib/antcontrib.properties">
		<classpath>
			<pathelement location="${3rdParty}/sourceforge.net/ant-contrib/1.0b3/jars/ant-contrib-1.0b3.jar"/>
		</classpath>
	</taskdef>
	
	<taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask">
		<classpath>
			<pathelement location="${3rdParty}/sourceforge.net/findbugs/1.3.4/lib/findbugs-ant.jar"/>
		</classpath>
	</taskdef>
	
	<taskdef resource="tasks.properties">
		<classpath>
			<path refid="classpath.cobertura" />
		</classpath>
	</taskdef>

	<taskdef resource="checkstyletask.properties">
        <classpath>
			<pathelement location="${3rdParty}/sourceforge.net/checkstyle/4.4/jars/checkstyle-optional.jar"/>
			<pathelement location="${3rdParty}/sourceforge.net/checkstyle/4.4/jars/checkstyle-all.jar"/>
		</classpath>
	</taskdef>
		
	<target name="init" >
		<!-- make dirs -->
		<mkdir dir="${build.dir}" />
		<mkdir dir="${build.classes.dir}" />
		<mkdir dir="${build.junit.dir}" />
		<mkdir dir="${build.cobertura.dir}"/>
		
		<mkdir dir="${docs.dir}" />
		<mkdir dir="${docs.javadoc.dir}" />
		<mkdir dir="${docs.junit.reports.dir}"/>
		<mkdir dir="${docs.junit.html.dir}"/>
		<mkdir dir="${docs.ivy.report.dir}"/>
		<mkdir dir="${docs.checkstyle.dir}"/>
		<mkdir dir="${docs.findbugs.dir}"/>	
		<mkdir dir="${docs.cobertura.dir}"/>	
		<mkdir dir="${docs.cobertura.dir}/xml"/>
		<mkdir dir="${dist.dir}"/>
		<!-- init timestamp-->
		<tstamp />
		<!-- get Revision -->
		<svn>
			<status path="${basedir}" revisionProperty="randi2.version.revision" />
		</svn>
		<echo message="Revision is ${randi2.version.revision}" />
		
		<property name="randi2.version.full" 
			value="${randi2.version.major}.${randi2.version.minor}.${randi2.version.patchlevel}.${randi2.version.revision}"/>		<echo message="Building Randi2 Version  ${randi2.version.full}" />
		
	</target>
	
	<target name="compile.src.prepare" depends="init">
		<ivy:retrieve conf="compile"/>
		<ivy:cachepath pathid="classpath.base"/>
		<ivy:report todir="${docs.ivy.report.dir}"/>
	</target>
	
	<target name="compile.src" depends="compile.src.prepare" description="--> compiling source">
		<javac srcdir="${src.dir}" 
				deprecation="off" 
				destdir="${build.classes.dir}" 
				includes="**" 
				failonerror="true"
				classpathref="classpath.base"
				debug="true">
		</javac>
	</target>

	<target name="compile.junittests.prepare" depends="init" >
		<ivy:retrieve conf="test"/>
		<ivy:cachepath pathid="classpath.test"/>
		<ivy:report todir="${docs.ivy.report.dir}"/>
	</target>
	
	<target name="compile.junittests" depends="compile.junittests.prepare,compile.src" >
		<javac srcdir="./test" 
				deprecation="off" 
				destdir="${build.junit.dir}"  
				includes="**" 
				failonerror="true">
				<classpath>
					<path refid="classpath.base"/>
					<path refid="classpath.test"/>
					<pathelement location="${build.classes.dir}" />
				</classpath>
		</javac>
	</target>
	
	<target name="run.junittests" depends="compile.junittests" description="--> running Junit tests">
		<junit printsummary="yes" 
				fork="true" 
				haltonfailure="no">
			<batchtest haltonfailure="no" 
						todir="${docs.junit.reports.dir}">
				<fileset dir="${build.junit.dir}" >
					<include name="**/*Test*.class" />
				</fileset>
			</batchtest>
			<classpath>
					<path refid="classpath.base"/>
					<path refid="classpath.test"/>
					<pathelement location="${build.classes.dir}" />
					<pathelement location="${build.junit.dir}" />
			</classpath>
			<formatter type="xml" />
		</junit>

		<junitreport todir="${docs.junit.reports.dir}">
			<fileset dir="${docs.junit.reports.dir}">
					<include name="TEST-*.xml" />
			</fileset>
			<report format="frames" todir="${docs.junit.html.dir}" />
		</junitreport>
	</target>
	
	<target name="run.javadoc" depends="compile.src.prepare" description="--> generate javadoc">
		 <javadoc packagenames="de.randi2.*"
		           sourcepath="${src.dir}"
		           defaultexcludes="yes"
		           destdir="${docs.javadoc.dir}"
		           author="true"
		           version="true"
		           use="true"
		           windowtitle="Randi2 API"
				   linksource="true"
				   source="1.5"				   
				   classpathref="classpath.base"
				   charset="UTF-8">
		    <doctitle><![CDATA[<h1>Randi2</h1>]]></doctitle>
		    <bottom><![CDATA[<i>Copyright &#169; 2007 Hochschule Heilbronn (SWP). All Rights Reserved.</i>]]></bottom>
		    <tag name="todo" scope="all" description="To do:"/>
		    <link href="http://developer.java.sun.com/developer/products/xml/docs/api/"/>
		  </javadoc>
	</target>
	
	<target name="run.checkstyle" depends="init" description="--> generates a report of code convention violations.">
		<checkstyle config="src/config/debug/randi2_checks.xml"
						failOnViolation="false">
			<formatter type="xml" tofile="${docs.checkstyle.dir}/checkstyle_report.xml"/>
			<fileset dir="src" includes="**/*.java"/>
		</checkstyle>
		<xslt in="${docs.checkstyle.dir}/checkstyle_report.xml" 
				out="${docs.checkstyle.dir}/checkstyle_report.html" 
				style="${3rdParty}/sourceforge.net/checkstyle/xsl/checkstyle-noframes.xsl"/>
	</target>
	
	<target name="run.findbugs" depends="compile.src" description="--> generates a report of potential bugs">
		<findbugs home="${findbugs.home}"
              output="html"
              outputFile="${docs.findbugs.dir}/findbugs.html" 
			  jvmargs="-Xmx512M"
			  debug="false"
			  effort="max"
			  stylesheet="fancy-hist.xsl"
			  reportLevel="low">
			<sourcePath path="${src.dir}" />
			<class location="${build.classes.dir}" />
		</findbugs>
	</target>
	
	<target name="compile.cobertura" depends="compile.src,compile.junittests">
		<cobertura-instrument todir="${build.cobertura.dir}" datafile="${build.cobertura.dir}/cobertura.ser">
			<fileset dir="${build.classes.dir}">
				<include name="**/*.class" />
			</fileset>
		</cobertura-instrument>
	</target>
	
	<target name="run.cobertura" depends="compile.cobertura" description="--> generates a report of codecoverage">
		<junit fork="yes">	
			<classpath>
				<pathelement location="${build.cobertura.dir}" />
				<pathelement location="${build.classes.dir}" />
				<pathelement location="${build.junit.dir}" />
				<path refid="classpath.cobertura" />
				<path refid="classpath.base"/>
				<path refid="classpath.test"/>
			</classpath>
			
			<sysproperty key="net.sourceforge.cobertura.datafile"
				file="${build.cobertura.dir}/cobertura.ser" />
			
			<formatter type="xml" />

			<batchtest haltonfailure="no" 
					todir="${docs.cobertura.dir}/xml">
				<fileset dir="${build.junit.dir}" >
					<include name="**/*Test*.class" />
				</fileset>
			</batchtest>
		</junit>
		<cobertura-report format="html" 
			destdir="${docs.cobertura.dir}" 
			srcdir="${src.dir}" 
			datafile="${build.cobertura.dir}/cobertura.ser" />
	</target>

	<target name="dist.prepare" depends="compile.src" >

		<ivy:retrieve conf="runtime"/>
		<ivy:report todir="${docs.ivy.report.dir}"/>
		<ivy:cachefileset setid="classpath.runtime" />
		
		<!-- Workaround: war:lib does not flatten files-->
		<copy todir="${build.dir}/runtime-libs" flatten="true" verbose="false">
				<fileset refid="classpath.runtime" />
		</copy>
		
		<!-- Copy and Rename Configfiles-->
		<copy file="${src.dir}/config/log4j/log4j.lcf.server" tofile="${build.dir}/config/log4j.lcf"/>
		
		<mkdir dir="${build.protocols.dir}" />
		<chmod dir="${build.protocols.dir}" perm="644"/>

	</target>
	
	<target name="dist" depends="dist.prepare" description="--> produce the distributables">
		
		<!-- Copying Config to build dir-->
		
		<war warfile="${dist.dir}/${randi2.dist.name}" webxml="WebContent/WEB-INF/web.xml">
			<classes dir="${build.classes.dir}"/>
			<lib dir="${build.dir}/runtime-libs" />
			<manifest>
				<attribute name="Built-By" value="${user.name}"/>
				<section name="common">
					<attribute name="Implementation-Title" value="Randi2"/>
					<attribute name="Implementation-Version" value="${randi2.version.full} build on ${TODAY}"/> 
					<attribute name="Implementation-Vendor" value="http://sourceforge.net/projects/randi2"/>
				</section>
			</manifest>
			
	
		<!--packaging webcontent-->
		<fileset dir="WebContent" id="webcontent">
			<patternset>
				<include name="**" />
				<exclude name="META-INF/**" />
				<exclude name="WEB-INF/lib/**" />
			</patternset>
		</fileset>
			
		<!--packaging release config -->
			<zipfileset dir="${src.dir}/config/release/" prefix="WEB-INF/classes/conf/release">
				<include name="release.conf"/>
				<include name="systemsperrung.conf"/>
				<include name="Nachrichtentexte.xml"/>
				<include name="proxool_cfg.xml"/>
			</zipfileset>
			
		<!--packaging debug config -->
			<zipfileset dir="${build.dir}/config" prefix="WEB-INF/">
				<include name="log4j.lcf"/>
			</zipfileset>
			
		<!--packaging WEB-INF config -->
			<zipfileset dir="${src.dir}/config/debug" prefix="WEB-INF/classes/conf/debug">
				<include name="debug.conf"/>
			</zipfileset>	
			<!--packaging WEB-INF/protokolle -->
			<zipfileset dir="${build.protocols.dir}" prefix="WEB-INF/protokolle"/>
			
		<!--packaging META-INF config -->
		<zipfileset dir="${src.dir}/META-INF/" prefix="META-INF/">
				<include name="persistence.xml"/>
				<include name="spring.xml"/>
				<include name="configuration.properties"/>
				<include name="subconfig/dao.xml"/>
				<include name="subconfig/database-mysql5.xml"/>
				<include name="subconfig/hibernate.xml"/>
				<include name="subconfig/aspects.xml"/>
				<include name="subconfig/domain.xml"/>
			</zipfileset>	
		</war>
		
		<echo>generating checksum</echo>
		<checksum algorithm="MD5" file="${dist.dir}/${randi2.dist.name}" pattern="{0}    {1}" fileext=".md5" forceOverwrite="yes"/>
	</target>
	
	<target name="lib" description="--> resolve dependencies with ivy, populating library directory">
		<ivy:retrieve conf="*"/>
    </target>
	
	<target name="clean" description="--> clean up the mess">
		
		<delete dir="${build.classes.dir}" 
			includeemptydirs="true"/>
		<delete dir="${build.junit.dir}" 
			includeemptydirs="true"/>
		<delete dir="${build.dir}" 
			includeemptydirs="true"/>
		
		
		<delete dir="${docs.javadoc.dir}" 	
			includeemptydirs="true"/>
		<delete dir="${docs.junit.reports.dir}" 
			includeemptydirs="true"/>
		<delete dir="${docs.junit.html.dir}" 
			includeemptydirs="true"/>
		<delete dir="${docs.ivy.report.dir}"
			includeemptydirs="true"/>
		<delete dir="${docs.checkstyle.dir}"
			includeemptydirs="true"/>
		<delete dir="${docs.dir}" 
			includeemptydirs="true"/>
	</target>
	
	<target name="clean.libs" description="--> clean up the lib folders">
		<delete dir="${ivy.lib.dir}" 
			includeemptydirs="true"/>
		<delete dir="${lib.dir}" 
			includeemptydirs="true"/>
	</target>
	
	<target name="clean.dist" description="--> clean up the dist directory only">
		<delete dir="${dist.dir}" includeemptydirs="true" />
	</target>
	
	<target name="clean.ivycache" description="--> cleaning the ivy-cache dir">
		<ivy:cleancache />
	</target>
	
	<target name="clean.all" 
		depends="clean,clean.libs,clean.dist,clean.ivycache" 
		description="--> cleaning ALL generated stuff"/>
	
	<target name="all" 
		depends="dist, run.junittests,run.javadoc,run.checkstyle,run.checkstyle,run.cobertura,run.findbugs"
		description="--> running all targets: generating dist, javadoc and run tests" />

	<target name="default" depends="dist" description="--> running the default target" />
	
	<target name="deploy" depends="dist" description="--> deploying the dist at a server" >
		<copy file="${dist.dir}/${randi2.dist.name}" todir="${deploy.server.dir}"/>
	</target>
</project>